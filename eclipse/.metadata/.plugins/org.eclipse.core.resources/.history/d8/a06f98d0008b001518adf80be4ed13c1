package com.ashindigo.alloycraft.lib;

import com.ashindigo.alloycraft.AlloyItem;
import com.ashindigo.alloycraft.AlloycraftItems;

import net.minecraft.init.Items;
import net.minecraft.inventory.InventoryCrafting;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.item.crafting.IRecipe;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.world.World;

public class RecipeHandler implements IRecipe {

	@Override
	public boolean matches(InventoryCrafting craftingwindow, World p_77569_2_) {
	    ItemStack lunchbox = null;
        for (int j = 0; j < craftingwindow.getSizeInventory(); j++) {
           if (craftingwindow.getStackInSlot(j) != null) {
              if (craftingwindow.getStackInSlot(j).getItem() == ModItems.Lunchbox) {
                 lunchbox = craftingwindow.getStackInSlot(j);
              }
           }
        }
        if (lunchbox != null) {
           float FoodStored = 0F;
           if (lunchbox.getTagCompound() == null) {
              lunchbox.setTagCompound(new NBTTagCompound());
           }
           try {
              FoodStored = lunchbox.getTagCompound().getFloat("Food_Stored");
           } catch (NullPointerException e) { FoodStored = 0F; }
           float FoodPointsToAdd = 0F;
           boolean NonFood = false;
           for (int j = 0; j < craftingwindow.getSizeInventory(); j++) {
              if (craftingwindow.getStackInSlot(j) != null) {
                 ItemStack StackInSlot = craftingwindow.getStackInSlot(j);
                 if (StackInSlot.getItem() instanceof ItemFood) {
                    ItemFood AFood = (ItemFood) StackInSlot.getItem();
                    FoodPointsToAdd = FoodPointsToAdd + AFood.func_150905_g(StackInSlot);
                 } else {
                    if (StackInSlot.getItem() != ModItems.Lunchbox) {
                       NonFood = true;
                    }
                 }
              }
           }
           if (FoodStored + FoodPointsToAdd <= 100F && NonFood == false) { // 100F = Maximum Storage
              ItemStack res = new ItemStack(ModItems.Lunchbox, 1, lunchbox.getItemDamage());
              res.setTagCompound(lunchbox.getTagCompound());
              res.getTagCompound().setFloat("Food_Stored", FoodStored + FoodPointsToAdd);
              return res;
           }
	}

	@Override
	public ItemStack getCraftingResult(InventoryCrafting p_77572_1_) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int getRecipeSize() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public ItemStack getRecipeOutput() {
		// TODO Auto-generated method stub
		return null;
	}

}